package com.grampus.hualauncherkai.Data;

import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.SupplicantState;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.net.wifi.WifiNetworkSuggestion;
import android.os.Looper;
import android.os.Build;
import 	android.net.ConnectivityManager;
import com.grampus.hualauncherkai.Data.NetDataHub;//add by gwb;
import 	android.net.wifi.WifiNetworkSuggestion.Builder;
import androidx.core.app.ActivityCompat;

import java.lang.reflect.Method;
import java.util.ArrayList;


import com.grampus.hualauncherkai.Tools.BootReceiver;
import com.grampus.hualauncherkai.Tools.Save;
import com.grampus.hualauncherkai.Tools.Tell;
import com.grampus.hualauncherkai.util.StringUtil;
import java.util.List;

//import static com.amap.api.location.APSServiceBase.LOCATION;
import static com.grampus.hualauncherkai.UI.MainActivity.g_bUseHuaWeiMDM;

/**
 * Created by Grampus on 2017/5/11.
 */


public class WifiHub extends BootReceiver
{
    private static final String WIFISSID_UNKNOW = "<unknown ssid>";

    public static String getWifiSSID(Context context) {
        /*
         *  先通过 WifiInfo.getSSID() 来获取
         */
        try {
            WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
            WifiInfo info = wifiManager.getConnectionInfo();
            String wifiId = info != null ? info.getSSID() : null;
            String result = wifiId != null ? wifiId.trim() : null;
            if (!StringUtil.isEmpty(result)) {
                // 部分机型上获取的 ssid 可能会带有 引号
                if (result.charAt(0) == '"' && result.charAt(result.length() - 1) == '"') {
                    result = result.substring(1, result.length() - 1);
                }
            }
            // 如果上面通过 WifiInfo.getSSID() 来获取到的是 空或者 <unknown ssid>，则使用 networkInfo.getExtraInfo 获取
            if (StringUtil.isEmpty(result) || WIFISSID_UNKNOW.equalsIgnoreCase(result.trim())) {
                NetworkInfo networkInfo = getNetworkInfo(context);
                if (networkInfo.isConnected()) {
                    if (networkInfo.getExtraInfo() != null) {
                        result = networkInfo.getExtraInfo().replace("\"", "");
                    }
                }
            }
            // 如果获取到的还是 空或者 <unknown ssid>，则遍历 wifi 列表来获取
            if (StringUtil.isEmpty(result) || WIFISSID_UNKNOW.equalsIgnoreCase(result.trim())) {
                result = getSSIDByNetworkId(context);
            }
            return result;
        }
        catch(Exception e) {
        }
        return WIFISSID_UNKNOW;
    }

    public static NetworkInfo getNetworkInfo(Context context){
        try{
            final ConnectivityManager connectivityManager = (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
            if (null != connectivityManager){
                return connectivityManager.getActiveNetworkInfo();
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        return null;
    }

    /*
     *  遍历wifi列表来获取
     */
    private static String getSSIDByNetworkId(Context context) {
        String ssid = WIFISSID_UNKNOW;
        try {
            WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
            if (wifiManager != null) {
                WifiInfo wifiInfo = wifiManager.getConnectionInfo();
                int networkId = wifiInfo.getNetworkId();
                List<WifiConfiguration> configuredNetworks = wifiManager.getConfiguredNetworks();
                for (WifiConfiguration wifiConfiguration : configuredNetworks) {
                    if (wifiConfiguration.networkId == networkId) {
                        ssid = wifiConfiguration.SSID;
                        break;
                    }
                }
            }
            return ssid;
        }
        catch(Exception e) {
        }
        return ssid;
    }



    public static boolean wifiThink(Context context)
    {
        try {
            Tell.log("开始执行wifiThink");
            if (g_bUseHuaWeiMDM)
                return false;//华为MDM的不处理。

            if(NetDataHub.get().bOpenMachineRightNowNoWifiControl == true) {
                NetDataHub.get().addLog("wifiThink------刚开机，此连不上服务器，不进行wifi控制.");
                return false;
            }


            WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
            WifiInfo wifiInfo = wifiManager.getConnectionInfo();

            String ssid = "";
            String bssid = "";

            //-------add by gwb;2020.9.27
            //Build.VERSION.SDK_INT  这个值好像是手机系统的编译SDK值。add by gwb;
            if (Build.VERSION.SDK_INT > Build.VERSION_CODES.O) {
                ssid = getWifiSSID(context);
            }
            else
            {
                ssid = wifiInfo.getSSID();//发现在安卓9.0下面是得不到wifi ID的。
                bssid = wifiInfo.getBSSID();
            }
/*

            final WifiNetworkSuggestion suggestion1 =new Builder().setSsid("test111111").build();
            final WifiNetworkSuggestion suggestion2 =
                    new Builder()
                            .setSsid("test222222")
                            .setWpa2Passphrase("test123456")
                            .build();
            final WifiNetworkSuggestion suggestion3 =
                    new Builder()
                            .setSsid("test333333")
                            .setWpa3Passphrase("test6789")
                            .build();

            List<WifiNetworkSuggestion> suggestionsList =new ArrayList<WifiNetworkSuggestion>();

            suggestionsList.add(suggestion1);
            suggestionsList.add(suggestion2);
            suggestionsList.add(suggestion3);


            //final WifiManager wifiManager =context.getSystemService(Context.WIFI_SERVICE);
            wifiManager.addNetworkSuggestions(suggestionsList);


 */




            //---------------------End.



            /*  del by gwb;2020.9.22  这个好像没用吧。
            //申请权限
            if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                //Request permission from user
                ActivityCompat.requestPermissions((Activity) context, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, LOCATION);
            } else {//Permission already granted
                if (wifiInfo.getSupplicantState() == SupplicantState.COMPLETED) {
                    ssid = wifiInfo.getSSID();//Here you can access your SSID
                }
            }*/



            /*--------add by gwb;2020.9.21
            if (ActivityCompat.checkSelfPermission(context, Manifest.permission.CHANGE_WIFI_STATE) != PackageManager.PERMISSION_GRANTED) {
                //Request permission from user
                NetDataHub.get().addLog("wifiThink------没有CHANGE_WIFI_STATE权限，调用申请" );
                ActivityCompat.requestPermissions((Activity) context, new String[]{Manifest.permission.CHANGE_WIFI_STATE}, LOCATION);
            }
            else
                NetDataHub.get().addLog("wifiThink------已经有CHANGE_WIFI_STATE权限了，不需要再申请" );

            if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_WIFI_STATE) != PackageManager.PERMISSION_GRANTED) {
                //Request permission from user
                NetDataHub.get().addLog("wifiThink------没有ACCESS_WIFI_STATE权限，调用申请" );
                ActivityCompat.requestPermissions((Activity) context, new String[]{Manifest.permission.ACCESS_WIFI_STATE}, LOCATION);
            }
            else
                NetDataHub.get().addLog("wifiThink------已经有ACCESS_WIFI_STATE权限了，不需要再申请" );
            //-----------end.
           */

            /*  add by gwb;2020.9.27
            //Build.VERSION.SDK_INT  这个值好像是手机系统的编译SDK值。add by gwb;
            if (Build.VERSION.SDK_INT > Build.VERSION_CODES.O) {
                ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
                assert cm != null;
                NetworkInfo info = cm.getActiveNetworkInfo();
                if (info != null && info.isConnected()) {
                    ssid = info.getExtraInfo();
                    Tell.log("WiFi SSID: " + ssid);
                }
            }*/


            if (!ssid.equals("<unknown ssid>")) {
                //Tell.log("wifi白名单 当前 " + wifiInfo.getSSID() + " " + wifiInfo.getBSSID());
                Tell.log("wifi白名单 当前 ssid: " + ssid);

                //String config = Save.getValue(context, "WIFI_APP_WHITE", "0");
                //if (NetDataHub.get() != null && NetDataHub.get().isCtrlWifi() && "0".equals(config)) {
                if (NetDataHub.get() != null && NetDataHub.get().isCtrlWifi()  ) {
                    //Tell.log("wifi 需要进行wifi操作白名单");
                    //if (NetDataHub.get().isInWifiList(wifiInfo.getSSID(), wifiInfo.getBSSID(), context)) {
                    if (NetDataHub.get().isInWifiList(ssid,bssid, context)) {//add by gwb;2020.9.27
                        //Tell.log("wifi 在白名单内，不用改变");
                        NetDataHub.get().addLog("wifiThink-----wifi 在白名单内，不用改变");
                        return false;
                    } else {

                        int netId = wifiInfo.getNetworkId();


                        boolean bRet = wifiManager.disableNetwork(netId);
                        wifiManager.removeNetwork(netId);//add by gwb;2020.9.17

                        NetDataHub.get().addLog("wifiThink------断开非法wifi!  ssid:["  + ssid + "]  bRet:" + bRet );

//                    wifiManager.setWifiEnabled(false);
//                    wifiManager.removeNetwork(netId);
//                    wifiManager.saveConfiguration();
//                    Looper.prepare();
//                    Tell.toast("断开非法wifi[" + wifiInfo.getSSID() + "]", context);
//                    Looper.loop();

                        return true;
                    }
                }
            }
            else{
                Thread.sleep(1000);
            }
        }
        catch (Exception e) {
            e.printStackTrace();
            Tell.log("wifiThink出错------->" + e.toString());
            NetDataHub.get().addLog("wifiThink------断开非法wifi!异常！！！");
        }
        return false;
    }


    @Override
    public void onReceive(Context context, Intent intent)
    {
        String action = intent.getAction();
        if (action.equals("android.net.wifi.RSSI_CHANGED"))
        {
            if (wifiThink(context))
            {
                Tell.toast("断开非法wifi", context);
               // NetDataHub.get().addLog("WifiHub---onReceive-----断开非法wifi!");
            }
        }
    }
    /**
     * 判断热点是否开启
     *
     * @param context
     * @return
     */
    public static boolean isApOn(Context context) { //add by gwb;2021.2.19
        WifiManager wifimanager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
        try {
            Method method = wifimanager.getClass().getDeclaredMethod("isWifiApEnabled");
            method.setAccessible(true);

            return (Boolean) method.invoke(wifimanager);
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return false;
    }

    /**
     * 关闭WiFi
     *
     * @param context
     */
    public static void closeWifi(Context context) {//add by gwb;2021.2.19
        try {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {//只有小于指定版本的才可以用。

                WifiManager wifimanager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
                if (wifimanager.isWifiEnabled()) {
                    wifimanager.setWifiEnabled(false);
                }
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
    /**
     * 关闭WiFi热点
     */
    public static void closeWifiAp(Context context) {
        if(!NetDataHub.m_bForbitAP)
        {
            NetDataHub.get().addLog("closeWifiAp---m_bForbitAP=false  热点变化不处理！！！");
            return ;
        }

        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {//只有小于指定版本的才可以用。
        //if (true) {//只有小于指定版本的才可以用。
            WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
            if (isApOn(context)) {
                try {
                    NetDataHub.get().addLog("closeWifiAp---开始关闭热点!!!");

                    Method method = wifiManager.getClass().getMethod("getWifiApConfiguration");
                    method.setAccessible(true);
                    WifiConfiguration config = (WifiConfiguration) method.invoke(wifiManager);
                    Method method2 = wifiManager.getClass().getMethod("setWifiApEnabled", WifiConfiguration.class, boolean.class);
                    method2.invoke(wifiManager, config, false);
                } catch (Exception e) {
                    NetDataHub.get().addLog("closeWifiAp---关闭热点异常！！！");
                    e.printStackTrace();
                }
            }
            else
                NetDataHub.get().addLog("closeWifiAp---热点已关闭!");
        }
    }


}
