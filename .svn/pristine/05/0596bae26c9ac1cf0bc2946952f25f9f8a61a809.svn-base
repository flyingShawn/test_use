package com.grampus.hualauncherkai.UI;

import android.Manifest;
import android.app.Activity;
import android.app.ActivityManager;
import android.app.AppOpsManager;
import android.app.Dialog;
import android.app.WallpaperManager;
import android.app.admin.DevicePolicyManager;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.graphics.PixelFormat;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.location.Location;
import android.media.projection.MediaProjectionManager;
import android.os.Binder;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.os.Process;
import android.os.SystemClock;
import android.provider.Settings;
import android.text.Html;
import android.text.method.LinkMovementMethod;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.RequiresApi;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.FragmentActivity;
import androidx.viewpager.widget.ViewPager;

import com.grampus.hualauncherkai.Data.AppDataHub;
import com.grampus.hualauncherkai.Data.MonetHub;
import com.grampus.hualauncherkai.Data.NetCtrlHub;
import com.grampus.hualauncherkai.Data.NetDataHub;
import com.grampus.hualauncherkai.Data.SampleEula;
import com.grampus.hualauncherkai.Data.WifiHub;
import com.grampus.hualauncherkai.R;
import com.grampus.hualauncherkai.TcpSock.CPackOperate;
import com.grampus.hualauncherkai.Tools.DeviceReceiver;
import com.grampus.hualauncherkai.Tools.DownloadUtils.DownloadFile;
import com.grampus.hualauncherkai.Tools.Tell;
import com.grampus.hualauncherkai.common.VersionInfoBean;
import com.grampus.hualauncherkai.log.LogTrace;
import com.grampus.hualauncherkai.service.EMMAccessibilityService;
import com.grampus.hualauncherkai.util.FileManagerUtil;
import com.huawei.android.app.VersionInfo;

import java.io.File;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;



public class MainActivity extends FragmentActivity
{
//    public static boolean isActive = false;
    public static Context g_context;
    public static boolean g_isApplyForFloat = false;
    boolean isRetry = true;
    private MediaProjectionManager g_mediaProjectionManager;

    public static final String TAG = "MainActivity";

    private ComponentName mAdminName = null;

    public static int     androidv = 0;//add by gwb;2020.9.24

    public static boolean   g_bUseHuaWeiMDM = false;//add by gwb;
    public static String   szVersionNum = "";//add by gwb;

    Location location;

    //-----add by gwb;2021.2.23 用作隐藏下拉菜单
    CustomViewGroup view ;
    public static final String STATUS_BAR_HEIGHT = "status_bar_height";
    public static final String DIMEN = "dimen";
    public static final String DEF_PACKAGE = "android";
    //---------------------end.

    private static String BACKGROUND_LOCATION_PERMISSION = "android.permission.ACCESS_BACKGROUND_LOCATION";
    //Log.i(TAG,"MainActivity-----开始运行");

    PageFragmentAdpter fragmentAdpter;
    RelativeLayout relativeLayout;

    ViewPager view_pager;
    RelativeLayout activity_main;
    LinearLayout linearLayout;

    List<AppFragment> fragmentList;
    List<List<ResolveInfo>> allPage;

    private MonetHub netBroadcastReceiver;

    private WifiHub wifiReceive;


    /**
     * 设备安全管理服务，2.2之前需要通过反射技术获取
     */
    private DevicePolicyManager devicePolicyManager = null;

    /**
     * 对应自定义DeviceAdminReceiver的组件
     */
    private ComponentName componentName = null;

    private boolean isDeviceOwnerApp;

    public Handler handler = new Handler()
    {
        @Override
        public void handleMessage(Message msg)
        {
            super.handleMessage(msg);
            if (msg.what == 1)
            {
                //Tell.toast("策略改变，刷新桌面"+c.get(Calendar.MINUTE)+"分"+c.get(Calendar.SECOND)+"秒",getApplication());
                Tell.toast("刷新桌面！",getApplication());
                reflashPageAndOffen();
            }
            else if (msg.what == 2)
            {
                removeViewPager();
            }
            else if (msg.what == 3)
            {
                Tell.toast((String) msg.obj, getApplicationContext());
            }
            else if(msg.what == 4)//add by gwb;升级
            {
                showDialog(MainActivity.this,(String)msg.obj);
            }
            else if(msg.what == 5)//add by gwb;
            {
                Toast.makeText(MainActivity.this, "当前已是最新版本，无需升级！", Toast.LENGTH_SHORT).show();
            }
            else if(msg.what == 6)//add by gwb;
            {
                Toast.makeText(MainActivity.this, "服务器没有升级包!", Toast.LENGTH_SHORT).show();
            }

            else if(msg.what == 7)//add by fsy;
            {
                Toast.makeText(MainActivity.this, "辅助功能尚未开启,无法进行控制!", Toast.LENGTH_LONG).show();
            }
            else if(msg.what == 8)//add by fsy;
            {
                Toast.makeText(MainActivity.this, "远程功能需先获取截屏权限", Toast.LENGTH_LONG).show();
            }
            if (msg.what == 9)//add by fsy 2021.11.5
            {
                Toast.makeText(MainActivity.this, "请将EMM显示在其他应用上层设为允许", Toast.LENGTH_LONG).show();
            }
            if (msg.what == 10)//add by fsy 2021.11.16  //屏幕监视来的消息
            {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                 //   Log.w("EMMMain", "msg.what == 10");
                    startMediaProjection();
                //    Log.w("EMMMain", "msg.what == 10---");
                }
            }

        }
    };

    /**
     * 获取系统开机时间(精确到秒)
     *
     * @return
     */
    public static long getBootTime() {
        long ut = SystemClock.elapsedRealtime() / 1000;
        if (ut == 0) {
            ut = 1;
        }
        return ut;
    }

    /**
     * 获取格式化系统开机时间(精确到秒)
     *
     * @return  格式化后的时间 5:03:06
     */
    public static String getFormatBootTime() {
        long ut = SystemClock.elapsedRealtime() / 1000;
        if (ut == 0) {
            ut = 1;
        }
        return convertBootTime(ut);
    }
    /**
     * 格式化启动时间
     *
     * @param t
     * @return
     */
    private static String convertBootTime(long t) {
        int s = (int) (t % 60);
        int m = (int) ((t / 60) % 60);
        int h = (int) ((t / 3600));

        return h + ":" + pad(m) + ":" + pad(s);
    }

    /**
     * 格式化2位
     *
     * @param n
     * @return
     */
    private static String pad(int n) {
        if (n >= 10) {
            return String.valueOf(n);
        } else {
            return "0" + n;
        }
    }
    void initView()
    {
        view_pager = findViewById(R.id.view_pager);
        activity_main = findViewById(R.id.activity_main);
        linearLayout = findViewById(R.id.linearLayout);
        fragmentList = new ArrayList<>();
    }

    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)
    void initData()
    {
        /*
        NetCtrlHub.init(MainActivity.this, handler);
        NetDataHub.init(MainActivity.this);*/

        //----add by gwb;2020.9.16  数据初始化放在最前面。

        NetDataHub.init(MainActivity.this);

        NetCtrlHub.init(MainActivity.this, handler);
        //------------------

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            CPackOperate.init(MainActivity.this, handler);
        }

        AppDataHub.init(getApplicationContext());
        OffenApp.init(this, handler);

        /*  del by gwb;2020.10.21  有时调试时发现会提示下面的信息，先去掉不用了。
        E/ActivityThread: Activity com.grampus.hualauncherkai.UI.MainActivity has leaked IntentReceiver com.grampus.hualauncherkai.Tools.BootReceiver@6f9c844 that was originally registered here. Are you missing a call to unregisterReceiver()?
    android.app.IntentReceiverLeaked: Activity com.grampus.hualauncherkai.UI.MainActivity has leaked IntentReceiver com.grampus.hualauncherkai.Tools.BootReceiver@6f9c844 that was originally registered here. Are you missing a call to unregisterReceiver()?
        at android.app.LoadedApk$ReceiverDispatcher.<init>(LoadedApk.java:1429)


        //BootReceiver.setHandler(handler);
        BootReceiver br = new BootReceiver();
        br.setHandler(handler);
        this.registerReceiver(br, new IntentFilter("android.net.wifi.RSSI_CHANGED"));//show by gwb;这边RSSI_CHANGED值是不是不对啊。

         */
        AppSetting.setHandler(handler);
        fragmentList = new ArrayList<>();
        allPage = new ArrayList<>();


        wifiReceive = new WifiHub();
        //wh.closeWifiAp(this);//add by gwb;2021.2.20 测试禁用热点。
        this.registerReceiver(wifiReceive, new IntentFilter("android.net.wifi.RSSI_CHANGED"));
    }

    void removeViewPager()
    {
        view_pager.removeAllViews();
    }

    void reflashPageAndOffen()
    {
        System.out.println("reflashPageAndOffen------刷新桌面----begin.");
        NetDataHub.get().addLog("reflashPageAndOffen------刷新桌面.");

        Log.w("EMMMain","------刷新桌面----begin.");
        try {

            if(!NetDataHub.get().CheckAppHaveChange()&&!NetDataHub.get().isCanReflashDesk() ){
                System.out.println("reflashPageAndOffen------APP没有变化，不刷新.");
                NetDataHub.get().addLog("reflashPageAndOffen------APP没有变化，不刷新.");
                return ;
            }
            NetDataHub.get().setCanReflashDesk(false);
            AppDataHub.show();

            allPage.clear();
            AppDataHub.loadApps();
            fragmentList.clear();
     //       allPage = AppDataHub.getAppPage();


            NetDataHub.get().addLog("reflashPageAndOffen----几页屏:"+allPage.size()+"  显示APP总数:" + AppDataHub.getShowAppCount());

            Log.w("EMMMain","几页屏:"+allPage.size()+"  显示APP总数:" + AppDataHub.getShowAppCount());

            for (int i = 0; i < allPage.size(); i++) {

                fragmentList.add(new AppFragment(getApplicationContext(), allPage.get(i), i));
            }

            fragmentAdpter = new PageFragmentAdpter(getSupportFragmentManager(), fragmentList);
            view_pager.removeAllViews();

            view_pager.setAdapter(fragmentAdpter);
            if (fragmentList.size() > 3) {
                view_pager.setOffscreenPageLimit(3);
            }

            OffenApp.load(AppDataHub.getOffen());
        }
        catch(Exception e) {
            NetDataHub.get().addLog("reflashPageAndOffen------异常-----------:"+e.getMessage());
            System.out.println("reflashPageAndOffen------异常-----------------");
            e.printStackTrace();
        }

        System.out.println("reflashPageAndOffen------刷新桌面----End.");
    }

    void initPageAndOffen()
    {
        AppDataHub.loadApps();
        allPage = AppDataHub.getAppPage();

        System.out.println("initPageAndOffen------allPage.size():"+allPage.size());

        for (int i = 0; i < allPage.size(); i++)
        {
            fragmentList.add(new AppFragment(getApplicationContext(), allPage.get(i), i));
        }
        fragmentAdpter = new PageFragmentAdpter(getSupportFragmentManager(), fragmentList);
        view_pager.setAdapter(fragmentAdpter);

        OffenApp.load(AppDataHub.getOffen());
    }

    void initNetData()
    {
        new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                if (NetCtrlHub.get().GetServerPolicy())
                {
                    handler.sendEmptyMessage(1);
                }
            }
        }).start();
    }

    /**
     * 检查是否拥有指定的所有权限
     */
    private boolean checkPermissionAllGranted(String[] permissions) {
        try {
            for (String permission : permissions) {
                if (ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {
                    // 只要有一个权限没有被授予, 则直接返回 false

                    NetDataHub.get().addLog("checkPermissionAllGranted----权限["+permission+"]没有授权");
                    //System.out.println("checkPermissionAllGranted----权限["+permission+"]没有授权");
                    //Log.e("err","权限"+permission+"没有授权");
                    return false;
                }
                else{
                    NetDataHub.get().addLog("checkPermissionAllGranted----权限["+permission+"]已授权");
                    //System.out.println("checkPermissionAllGranted----权限["+permission+"]已授权");
                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        return true;
    }
    public void checkPermission() { //add by gwb;2020.10.13

        try {
            int targetSdkVersion = 0;

            /* del by gwb;2020.11.25
            String[] PermissionString = {Manifest.permission.READ_EXTERNAL_STORAGE,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE,
                    Manifest.permission.ACCESS_WIFI_STATE,
                    Manifest.permission.CHANGE_WIFI_STATE,
                    Manifest.permission.SET_WALLPAPER};

             */
            //-----add by gwb;2020.11.25 增加地图支持
            String[] PermissionString = {Manifest.permission.READ_EXTERNAL_STORAGE,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE,
                    Manifest.permission.ACCESS_COARSE_LOCATION,
                    Manifest.permission.ACCESS_FINE_LOCATION,
                    Manifest.permission.ACCESS_WIFI_STATE,
                    Manifest.permission.CHANGE_WIFI_STATE,
                    Manifest.permission.SET_WALLPAPER,
                    BACKGROUND_LOCATION_PERMISSION};
            //---------------end.

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                //Build.VERSION.SDK_INT是获取当前手机版本 Build.VERSION_CODES.M为6.0系统
                //如果系统>=6.0
                //if (targetSdkVersion >= Build.VERSION_CODES.M) {
                //第 1 步: 检查是否有相应的权限
                boolean isAllGranted = checkPermissionAllGranted(PermissionString);
                if (isAllGranted) {
                    System.out.println("checkPermission----所有权限已经授权");
                    return;
                }
                System.out.println("checkPermission----弹出权限申请:" + PermissionString);
                // 一次请求多个权限, 如果其他有权限是已经授予的将会自动忽略掉
                //ActivityCompat.requestPermissions(this, PermissionString, 1);
                this.requestPermissions( PermissionString, 123);//一定要用下面的，否则回调收不到通知。
                //}

                /*
                if (!Settings.System.canWrite(this)) {
                    Intent intent = new Intent(android.provider.Settings.ACTION_MANAGE_WRITE_SETTINGS);
                    intent.setData(Uri.parse("package:" + this.getPackageName()));
                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    this.startActivity(intent);
                } else {
                    //有了权限，具体的动作

                }
                 */

            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }



    @RequiresApi(api = Build.VERSION_CODES.M)
    void SetDesktopBackground()
    {//add by gwb;2020.10.13

        try {
            int hasWriteStoragePermission = ContextCompat.checkSelfPermission(getApplication(), Manifest.permission.WRITE_EXTERNAL_STORAGE);
            if (hasWriteStoragePermission == PackageManager.PERMISSION_GRANTED) {
                //拥有权限，执行操作
                WallpaperManager wm = WallpaperManager.getInstance(this);
                Drawable wallPaper = wm.getDrawable();
                activity_main.setBackground(wallPaper);//一定要WRITE_EXTERNAL_STORAGE这个权限。
                view_pager.getBackground().setAlpha(0);
                linearLayout.getBackground().setAlpha(0);
            } else {
                //没有权限，向用户请求权限
                requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 0);
                System.out.println("请求权限");
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }


    }
    public static boolean isEMUI() {
        //emuiApiLevel>0 即华为系统
        int emuiApiLevel = 0;
        try {
            Class cls = Class.forName("android.os.SystemProperties");
            Method method = cls.getDeclaredMethod("get", String.class);
            emuiApiLevel = Integer.parseInt((String) method.invoke(cls, new Object[]{"ro.build.hw_emui_api_level"}));//string为"",报错捕获
        } catch (Exception e) {
            e.printStackTrace();
        }
        return emuiApiLevel > 0;
    }

    //利用反射获取是否拥有悬浮框权限
    public static boolean getAppOps(Context context) {
        try {
            Object object = context.getSystemService(context.APP_OPS_SERVICE);
            if (object == null) {
                return false;
            }
            Class localClass = object.getClass();
            Class[] arrayOfClass = new Class[3];
            arrayOfClass[0] = Integer.TYPE;
            arrayOfClass[1] = Integer.TYPE;
            arrayOfClass[2] = String.class;
            Method method = localClass.getMethod("checkOp", arrayOfClass);
            if (method == null) {
                return false;
            }
            Object[] arrayOfObject1 = new Object[3];
            arrayOfObject1[0] = Integer.valueOf(24);
            arrayOfObject1[1] = Integer.valueOf(Binder.getCallingUid());
            arrayOfObject1[2] = context.getPackageName();
            int m = ((Integer) method.invoke(object, arrayOfObject1)).intValue();
            return m == AppOpsManager.MODE_ALLOWED;
        } catch (Exception ex) {
            NetDataHub.get().addLog("EMMmain------获取悬浮框权限error:"+ ex.toString());
        }
        return true;    //如果报错了，即不能成功获取，那就别一直弹出悬浮框申请页面了；
    }


    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        setTheme(R.style.AppTheme);

        super.onCreate(savedInstanceState);


        g_context = getApplicationContext();
        //------------add by gwb;2020.9.23
        DevicePolicyManager mDevicePolicyManager = (DevicePolicyManager) getSystemService(Context.DEVICE_POLICY_SERVICE);
        mAdminName = new ComponentName(this, DeviceReceiver.class);

        try {
            String szRelease = Build.VERSION.RELEASE;
            if(szRelease.length()>1)
                szRelease = szRelease.substring(0,2);
            else
                szRelease = szRelease.substring(0,1);

            szRelease = szRelease.replace(".","");
            androidv =Integer.parseInt(szRelease);

            //int currentapiVersion=android.os.Build.VERSION.SDK_INT;

            String manufacturer = Build.MANUFACTURER;
            if (manufacturer != null && manufacturer.length()>0) {
                manufacturer = manufacturer.toLowerCase();
            }
            if(androidv>= 9 && (isEMUI() || manufacturer == "huawei")) {//9.0以上华为才需要
                g_bUseHuaWeiMDM = true;
            }

            String version = VersionInfo.getApiVersion();//华为的SDK里面的

        } catch (NumberFormatException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
        //-------------------end.

        setContentView(R.layout.android_app);

 //     startService(new Intent(this, TaskThink.class));

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            initData();
        }
        initView();
        initPageAndOffen();
        //initNetData();  del by gwb;2020.9.17  不需用，在后面定时器里处理。

        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction("com.grampus.hualauncherkai.action.STOP_RECEIVER");
        intentFilter.addAction("com.grampus.hualauncherkai.action.REFRESH_APP");
        intentFilter.addAction("android.net.wifi.WIFI_AP_STATE_CHANGED");//add by gwb;2021.2.20  增加热点变化通知。
        registerReceiver(mReceiver, intentFilter);


        /**/
        /**
         * 2020.04.10 未来修改
         * 设置状态栏颜色
         */
        //setStatusBarColor(this, R.color.brightBlue);
        //setNavigationBarColor(this, R.color.dockColor);

        /**
         * 2020.04.14 未来修改
         * 进行一些系统的设置
         */
        /* del by gwb;
        appUtils au = new appUtils(this);
        au.appControl();
        */
        /**
         * 2020.04.26 未来修改
         * 移动网络注册监听
         */

        /* del by gwb;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N)
        {
            //实例化IntentFilter对象
            IntentFilter filter = new IntentFilter();
            filter.addAction("android.net.conn.CONNECTIVITY_CHANGE");
            netBroadcastReceiver = new MonetHub();
            //注册广播接收
            registerReceiver(netBroadcastReceiver, filter);
        }
        */


        /**
         * 2020.06.23 未来修改
         * 更改了壁纸的设置，需要动态申请读写权限
         * 设置程序不允许卸载
         */

        /* del by gwb;2020.7.20
        int hasWriteStoragePermission = ContextCompat.checkSelfPermission(getApplication(), Manifest.permission.WRITE_EXTERNAL_STORAGE);
        if (hasWriteStoragePermission == PackageManager.PERMISSION_GRANTED)
        {
            //拥有权限，执行操作
            WallpaperManager wm = WallpaperManager.getInstance(this);
            Drawable wallPaper = wm.getDrawable();
            activity_main.setBackground(wallPaper);
            view_pager.getBackground().setAlpha(0);
            linearLayout.getBackground().setAlpha(0);
        }
        else
        {
            //没有权限，向用户请求权限
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 0);
            System.out.println("请求权限");
        }
        devicePolicyManager = (DevicePolicyManager) this.getSystemService(Context.DEVICE_POLICY_SERVICE);
        componentName = new ComponentName(this, DeviceReceiver.class);
        devicePolicyManager.setUninstallBlocked(componentName, "com.grampus.hualauncherkai", true);
        */
       // View view=getWindow().getDecorView().findFocus();

        //--------add by gwb;2020.10.8
        try {
            szVersionNum = getVersionName(this);

            //boolean bIsRoot = NetDataHub.get().isRoot();
            //String szVersion = NetDataHub.get().getVersionName(this);

            String manufacturer = Build.MANUFACTURER;
            if (manufacturer != null && manufacturer.length() > 0) {
                manufacturer = manufacturer.toLowerCase();
            }
            if (androidv >= 9 && (isEMUI() || manufacturer == "huawei")) {//9.0以上华为才需要

                //new SampleEula(this, mDevicePolicyManager, mAdminName).show();

                g_bUseHuaWeiMDM = true;
            }

            new SampleEula(this, mDevicePolicyManager, mAdminName).show();

            checkPermission();

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                SetDesktopBackground();
            }


            /*
            long bootTime1 = getBootTime(); // 获取系统开机时间(精确到秒)
            //Log.d(TAG, "___获取系统开机时间1=" + bootTime1);
            NetDataHub.get().addLog("MainActivity-----获取系统开机时间1=" + bootTime1);

            String bootTime2 = getFormatBootTime(); // 获取格式化系统开机时间
            //Log.d(TAG, "___获取系统开机时间2=" + bootTime2);
            NetDataHub.get().addLog("MainActivity___获取系统开机时间2=" + bootTime2);

            if(bootTime1 < 300)//
            {
                g_bIsNowOpenMachine = true;
                NetDataHub.get().addLog("MainActivity___开机小于300秒.");
            }
             */

            //----------add by gwb;2021.2.25
            /*
            try {
                location = MyRawLocation.getInstance(MainActivity.this).showLocation();
                if (location != null) {
                    String address = "纬度：" + location.getLatitude() + "经度：" + location.getLongitude();
                    Log.d("FLY.LocationUtils", address);
                    NetDataHub.get().addLog("MainActivity___开机就获得GPS："+address);
                }
                else
                {
                    NetDataHub.get().addLog("MainActivity___开机就获得GPS失败.");
                }
            }catch(Exception e)
            {
                e.printStackTrace();
            }
            Log.d(TAG, "-----------end.");
             */
            //-----------end.


           // preventStatusBarExpansion(this);

        }
        catch(Exception e){
            e.printStackTrace();
        }
    }

    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
    public void startMediaProjection(){
        try {

            if(NetDataHub.g_ResultData == null&&isRetry)
            {
                Log.w("EMMScreenCast", "mService.isAutoAgree = true");
                EMMAccessibilityService.getInstance().isAutoAgree = true;
                this.g_mediaProjectionManager = (MediaProjectionManager) getSystemService(Context.MEDIA_PROJECTION_SERVICE);
                startActivityForResult(g_mediaProjectionManager.createScreenCaptureIntent(), 300);
            }
        }catch (Exception e) {
            Log.e(TAG, "startMediaProjection---error: "+e.toString() );
        }

    }
    @Override
    protected void onResume() { //add by fsy 2021.9.20
        super.onResume();   //注掉测返回无app
       // reflashPageAndOffen();


        Log.w("EMMMain","页数:"+allPage.size()+"  显示APP总数:" + AppDataHub.getShowAppCount());

        if(getAppOps(getApplicationContext()))
        {
       //     NetDataHub.get().addLog("EMMmain------已拥有悬浮框权限");
            g_isApplyForFloat = false;

       //     handler.sendEmptyMessage(9);
        }else
        {
            NetDataHub.get().addLog("EMMmain------未获得悬浮框权限---请求开启");
           // WifiHub.isWhiteWifi = false;    //该变量的作用是控制辅助服务不会立刻屏蔽设置
            g_isApplyForFloat = true;
            handler.sendEmptyMessage(9);
            //请将EMM显示在其他应用上层设为运行
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {

                if (!Settings.canDrawOverlays(this)) {
                    NetDataHub.get().addLog("main------1");
                    Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);
                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    startActivity(intent);
                //    startActivityForResult(intent, 10);
                }
            }

        }
//        isActive = true;  //悬浮框

/*
        //控件生成时Activity可能还没有完成加载
        // https://blog.csdn.net/sdsxtianshi/article/details/78530491/
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
            Log.e("WifiHub", "111111111111---------onResume" );
            EMMAccessibilityService.getInstance().getWiFiNow(getApplicationContext());
        }
*/

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            if(EMMAccessibilityService.isStart())
            {
            //    Log.i("EMMScreen", "MyAccessibilityService.mService---已启动" );
                startMediaProjection();
                isRetry = false;
            } else {
            //    Log.i("EMMScreen", "MyAccessibilityService.mService---还未启动");
            }
        }
    }

    @Override
    protected void onStop() {
        super.onStop();
    }

    @Override
    protected void onDestroy()
    {
        super.onDestroy();
        try
        {
            Log.w("EMMMain","onDestroy-------------释放！！");
            unregisterReceiver(mReceiver);
            unregisterReceiver(wifiReceive);//add by gwb;2021.4.15
            //unregisterReceiver(netBroadcastReceiver);//del by gwb;2021.4.15


            //------------------------add by gwb;2021.4.15  安卓小于8.0时才这样处理,淮安医院PDA在插上4G卡的时候会自动走到onDestroy，导致桌面图标全没了，所以这里先重启解决。
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O)
            {
                System.out.println("onDestroy------------------重启进程！！");
                finish();
                Intent mHomeIntent = new Intent(Intent.ACTION_MAIN);

                mHomeIntent.addCategory(Intent.CATEGORY_HOME);
                mHomeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK
                        | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
                startActivity(mHomeIntent);

                stopself();
            }
        }
        catch (Exception e)
        {
            Log.e("EMMMain","onDestroy-error:"+e.toString());
            e.printStackTrace();
        }
    }

    private String getRunningActivityName()
    {
        ActivityManager activityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
        String runningActivity = activityManager.getRunningTasks(1).get(0).baseActivity.getPackageName();
        return runningActivity;
    }

    @Override
    public void onBackPressed()
    {
//        super.onBackPressed();
//        handler.sendEmptyMessage(1);
    }

    private BroadcastReceiver mReceiver = new BroadcastReceiver()
    {

        @Override
        public void onReceive(Context context, Intent intent) {
            // TODO Auto-generated method stub
            try {
                String action = intent.getAction();
                if ("com.grampus.hualauncherkai.action.STOP_RECEIVER".equals(action)) {
                    LogTrace.i(TAG, "onReceive", "=================");
                    stopself();
                } else if ("com.grampus.hualauncherkai.action.REFRESH_APP".equals(action)) {
                    LogTrace.i(TAG, "onReceive", "========APP=========");
                    handler.sendEmptyMessage(1);
                } else if ("android.net.wifi.WIFI_AP_STATE_CHANGED".equals(action)) {//add by gwb;2021.2.20  监听热点变化
                    //便携式热点的状态为：10---正在关闭；11---已关闭；12---正在开启；13---已开启
                    int state = intent.getIntExtra("wifi_state", 0);
                    //Log.i(TAG, "state= "+state);
                    //wiFiAPObserver.stateChanged(state);
                    NetDataHub.get().addLog("MainActivity-----onReceive---热点变化---wifi_state:" + state);
                    if (state == 13) {
                        WifiHub.closeWifiAp(context);
                    }
                }
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    };

    private void stopself()
    {
        System.out.println("stopself-----自杀进程 ！！！！");
  //      stopService(new Intent(this, TaskThink.class));
        finish();
        Process.killProcess(Process.myPid());
    }
    /**
     * 获取版本号
     *
     * @throws PackageManager.NameNotFoundException
     */
    public String getVersionName(Context context) {
        String version = "";
        try {
            // 获取packagemanager的实例
            PackageManager packageManager = context.getPackageManager();
            // getPackageName()是你当前类的包名，0代表是获取版本信息
            PackageInfo packInfo = packageManager.getPackageInfo(context.getPackageName(), 0);
            version = packInfo.versionName;
        }
        catch(Exception e){

        }
        return version;
    }

    static public  void showDialog(final Activity activity, final String szServerVersion){//add by gwb;
        try {
            VersionInfoBean versionInfoBean;
            //String ss = getExternalCacheDir()+ "/1.1.1.jpg";

            NetDataHub.get().addLog("showDialog---当前服务器上版本与本地不同，提示需要升级："+szServerVersion);

            versionInfoBean = new VersionInfoBean("1.1.1",
                    "http://11.apk",
                    "有新版本更新，请点击安装开始升级！",
                    "/1.1.1.jpg");

            final Dialog dialog = new Dialog(activity);
            LayoutInflater inflater = (LayoutInflater) activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            TextView version, content;
            Button left, right;
            View view = inflater.inflate(R.layout.version_update, null, false);
            version = view.findViewById(R.id.version);
            content = view.findViewById(R.id.content);
            left = view.findViewById(R.id.left);
            right = view.findViewById(R.id.right);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                content.setText(Html.fromHtml(versionInfoBean.getDesc(), Html.FROM_HTML_MODE_LEGACY));
            } else {
                content.setText(Html.fromHtml(versionInfoBean.getDesc()));
            }
            content.setMovementMethod(LinkMovementMethod.getInstance());
            version.setText("存在新版本： " + szServerVersion);
            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
            left.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    dialog.dismiss();
                }
            });
            right.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    dialog.dismiss();

                    downloadNewVersionFromServer(activity,szServerVersion);

                }
            });
            dialog.setContentView(view);
            dialog.setCancelable(false);
            Window dialogWindow = dialog.getWindow();
            dialogWindow.setGravity(Gravity.CENTER);
            //dialogWindow.setWindowAnimations(R.style.ActionSheetDialogAnimation);
            WindowManager.LayoutParams lp = dialogWindow.getAttributes();
            WindowManager wm = (WindowManager)activity.getSystemService(Context.WINDOW_SERVICE);
            //lp.width =wm.getDefaultDisplay().getWidth()/10*9;

            Rect size = new Rect();
            wm.getDefaultDisplay().getRectSize(size);
            lp.width = size.width()/ 10 * 9;
            dialogWindow.setAttributes(lp);
            dialog.show();
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
    /**
     * 启动服务后台下载
     */
    static public void downloadNewVersionFromServer(Activity activity,String szServerVersion){//add by gwb;2020.10.20
      //  if(new File(versionInfoBean.getPath()).exists()){
      //      new File(versionInfoBean.getPath()).delete();
      //  }

        try {

            String rootPath = Environment.DIRECTORY_DOWNLOADS;

            if (FileManagerUtil.hasSdcard()) {
                String szDirPath = activity.getExternalFilesDir("Download").getPath();
                File fileDir = new File(szDirPath);
                if (!fileDir.exists()) {
                    fileDir.mkdirs();
                }
                FileManagerUtil.deleteFolderFile(szDirPath, false);

                final File file = new File(szDirPath + "/" + szServerVersion + ".apk");

                String szServerIP = NetCtrlHub.get().getServiceAd();

                String url = "http://"+szServerIP+"/teldown/encrypttemp/EMM-Update/" +szServerVersion+".apk";

                //String urlStr = null;
                //urlStr = URLEncoder.encode(url,"utf-8") ;这边不需要用。

                NetDataHub.get().addLog("Download-----开始下载升级包:"+url);
                DownloadFile df = new DownloadFile();
                df.Download(url, rootPath, activity, null,null);
                NetDataHub.get().addLog("Download-----下载升级包结束:"+url);
            } else {
                Toast.makeText(activity, "请插入SD后才能升级！", Toast.LENGTH_SHORT).show();
            }
        }catch (Exception e){
            e.printStackTrace();
        }
    }
    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        switch (requestCode) {
            case 123:
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    //权限已经都通过了，可以下载apk到SDk中了
                    Toast.makeText(this, "权限已经都通过了！", Toast.LENGTH_SHORT).show();
                } else {
                    // 没有申请权限
                    Toast.makeText(this, "申请权限没有全部通过！", Toast.LENGTH_SHORT).show();
                }
                break;
            default:
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode,Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        //此处可以根据两个Code进行判断，本页面和结果页面跳过来的值

        /*
        if (requestCode == 10) {//悬浮框
            if (Build.VERSION.SDK_INT >= 23) {
                if (!android.provider.Settings.canDrawOverlays(this)) {
                    Toast.makeText(MainActivity.this,"已拒绝!",Toast.LENGTH_SHORT);
                } else {
                    showFloatWindow();
                }
            }
        }
         */

        if (requestCode == 777) {
            NetDataHub.get().setHuaWeiDesktop(this);//add by gwb;2020.10.13
        }
        if (requestCode == 300) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                if (resultCode != Activity.RESULT_OK) {
                        //this.g_mediaProjectionManager = (MediaProjectionManager) getSystemService(Context.MEDIA_PROJECTION_SERVICE);
                    if(isRetry) //再次申请
                    {
                        startActivityForResult(g_mediaProjectionManager.createScreenCaptureIntent(), 300);

                        isRetry= false;
                    }
                    NetDataHub.g_ResultData = null;

                    Log.i(TAG, "User didn't allow.requestCode"+requestCode);
                } else {
                    Log.w("EMMScreen", "Starting screen capture requestCode"+requestCode+"data:"+data.toString());
                    // Intent inten = new Intent
                    NetDataHub.g_ResultCode = resultCode;
                    NetDataHub.g_ResultData = data; //其他可赋值，主要在于data
                }
            }
        }

    }
    @Override
    public void onWindowFocusChanged(boolean hasFocus){
        // TODO Auto-generated method stub
  //      disableStatusBar();
        super.onWindowFocusChanged(hasFocus);
    }

/*	无系统权限无效
    public void disableStatusBar(){
       // Object service = getSystemService(Context.STATUS_BAR_SERVICE);//STATUS_BAR_SERVICE是系统api
       // Method test2 = statusbarManager.getMethod("collapsePanels");
        try {
            Object service = getSystemService("statusbar");//STATUS_BAR_SERVICE是系统api
            Log.i("EMM", "disableStatusBar-------------");
            Class<?> statusBarManager = Class.forName("android.app.StatusBarManager");
            Method expand = statusBarManager.getMethod("disable", int.class);
            //判断版本大小
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
                expand.invoke(service,0x00010000);//View.STATUS_BAR_DISABLE_EXPAND     0x00010000
         //   }else {
         //       expand.invoke(service, DISABLE_EXPAND_LOW);
            }
        } catch (Exception e) {
            Log.e("EMM", "disableStatusBar--error:"+e.toString());
            e.printStackTrace();
        }
    }
*/



    public void preventStatusBarExpansion(Context context) {
        WindowManager manager = ((WindowManager)context.getApplicationContext()
                .getSystemService(Context.WINDOW_SERVICE));

        WindowManager.LayoutParams localLayoutParams = new WindowManager.LayoutParams();
        localLayoutParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_ERROR;
        localLayoutParams.gravity = Gravity.TOP;
        localLayoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
                | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL
                | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;

        localLayoutParams.width = WindowManager.LayoutParams.MATCH_PARENT;

        int resId = context.getResources()
                .getIdentifier(STATUS_BAR_HEIGHT, DIMEN, DEF_PACKAGE);
        int result;
        if (resId > 0) {
            result = context.getResources()
                    .getDimensionPixelSize(resId);
        } else {
            // Use Fallback size:
            result = 60; // 60px Fallback
        }

        localLayoutParams.height = result;
        localLayoutParams.format = PixelFormat.TRANSPARENT;

        if (view == null) {
            view = new CustomViewGroup(context);
        }

        try {
            if (manager != null) {
                manager.addView(view, localLayoutParams);
            }
        } catch (Exception ignored) {
        }
    }
    public void allowStatusBarExpansion(Context context) {
        WindowManager manager = ((WindowManager) context.getApplicationContext()
                .getSystemService(Context.WINDOW_SERVICE));
        try {
            if (manager != null) {
                manager.removeViewImmediate(view);
            }
        } catch (Exception ignored) {
        }
    }

    class CustomViewGroup extends ViewGroup {
        public CustomViewGroup(Context context) {
            super(context);
        }

        @Override
        protected void onLayout(boolean changed,
                                int l,
                                int t,
                                int r,
                                int b) {
        }

        @Override
        public boolean onInterceptTouchEvent(MotionEvent ev) {
            // Intercepted touch!
            return true;
        }
    }
}

/*  add by gwb;
adb shell dpm set-device-owner com.grampus.hualauncherkai/.Tools.DeviceReceiver

高德地图使用：
https://console.amap.com/dev/key/app
帐号为:75954194@qq.com
对应的KEY为：44f375049fe955bbeb7fb56315d482ab
发布安全码SHA1：8A:76:E0:CA:0D:A0:E5:25:E9:57:8D:C2:61:03:90:A0:FC:5E:E2:2C
调用安全码SHA1:7E:AD:FD:B7:70:0E:A1:BE:BB:84:84:36:9A:33:DD:41:FD:42:77:FA
包名称一定要是com.grampus.hualauncherkai
 */