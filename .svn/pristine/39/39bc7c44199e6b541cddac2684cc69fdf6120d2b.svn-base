package com.grampus.hualauncherkai.TcpSock;

import android.accessibilityservice.AccessibilityService;
import android.app.Instrumentation;
import android.os.SystemClock;
import android.util.Log;
import android.view.MotionEvent;
import android.view.accessibility.AccessibilityEvent;


import com.grampus.hualauncherkai.Data.GlobalPara;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;

import static android.view.accessibility.AccessibilityEvent.TYPE_TOUCH_INTERACTION_START;

public class CPackOperate {
    public boolean m_bStartCapture = false;
    public int m_nUniqueID = 0;
    private  static final int CLICK_ACTION = 1;
    private  static final int LONG_CLICK_ACTION = 2;
    //   CPacket m_Packet;
    Instrumentation inst = new Instrumentation();

    // ScreenCastService screenCastService ;
    public String getString(ByteBuffer buffer)
    {
        Charset charset = null;
        CharsetDecoder decoder = null;
        CharBuffer charBuffer = null;
        try
        {
            charset = Charset.forName("UTF-8");
            decoder = charset.newDecoder();
            // charBuffer = decoder.decode(buffer);//用这个的话，只能输出来一次结果，第二次显示为空
            charBuffer = decoder.decode(buffer.asReadOnlyBuffer());
            return charBuffer.toString();
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
            return "";
        }
    }

    public void OnReceivePack(ByteBuffer bodyBuf){

    /*typedef struct screen_pack_head
      {
          int		nUniqueID;
          int		nMainCmd;
          int		nDataSize;
      }SCREEN_PACK_HEAD;*/

        bodyBuf.position(4);
        int nMainCmd = bodyBuf.order(ByteOrder.LITTLE_ENDIAN).getInt( );//取四个字节，并将其转为int类型的数字
        int nDataSize = bodyBuf.order(ByteOrder.LITTLE_ENDIAN).getInt( );


        //    Log.i("OnReceivePack","1111111111111111111111111");
        //System.out.println("OnReceivePack------nMainCmd:"+nMainCmd);
        //System.out.println("OnReceivePack------nDataSize:"+nDataSize);

        if(nMainCmd == GlobalPara.WM_USE_NOTIFY_GET_CHANAGE_BUF){
            Log.i("OnReceivePack","WM_USE_NOTIFY_GET_CHANAGE_BUF");
        }
        else if(nMainCmd == GlobalPara.WM_SINGLE_CAPTURE_START){
            Log.i("OnReceivePack","WM_SINGLE_CAPTURE_START------开始监视.");
            m_bStartCapture = true;
        }
        else if(nMainCmd == GlobalPara.WM_TO_ANROID_CMD_STRING){//所有的命令全在这里加


        }



    }

    private void execShellCmd(String cmd) {

        try {
            // 申请获取root权限，这一步很重要，不然会没有作用
            //
            //Process process = Runtime.getRuntime().exec("su");

            //Process mProcess = new ProcessBuilder().command("/system/xbin/su").redirectErrorStream(true).start();

            //OutputStream outputStream = mProcess.getOutputStream();
            Process process = Runtime.getRuntime().exec("su");
            Log.w("onClick", cmd);
            // 获取输出流
            OutputStream outputStream = process.getOutputStream();
            DataOutputStream dataOutputStream = new DataOutputStream(
                    outputStream);
            dataOutputStream.writeBytes(cmd);
            dataOutputStream.flush();
            dataOutputStream.close();
            outputStream.close();
            Log.w("onClick", cmd);
        } catch (Exception e) { //Throwable

            Log.i("onClick", "execShellCmd失败！！！"+e);
            //    t.printStackTrace();
        }
    }

}

