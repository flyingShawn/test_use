package com.grampus.hualauncherkai.service;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.graphics.BitmapFactory;
import android.hardware.display.VirtualDisplay;
import android.media.MediaCodec;
import android.media.MediaCodecInfo;
import android.media.MediaFormat;
import android.media.projection.MediaProjection;
import android.media.projection.MediaProjectionManager;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.os.Messenger;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Surface;
import android.view.WindowManager;

import androidx.annotation.Nullable;
import androidx.core.app.NotificationCompat;

import com.grampus.hualauncherkai.Data.NetDataHub;
import com.grampus.hualauncherkai.TcpSock.TcpSocketClient;
import com.grampus.hualauncherkai.Data.AndroidParameter;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;

import static com.grampus.hualauncherkai.R.mipmap.ic_launcher;

/**
 * Created by sih on 2017-05-31.
 */
public final class ScreenCastService extends Service {

    private static final int FPS = 1;  //帧率
    private final String TAG = "ActivityServiceMessage";

    private MediaProjectionManager mediaProjectionManager;
    private Handler handler;
    private Messenger crossProcessMessenger;

    private TcpSocketClient tcpSocketClient;

    private MediaProjection mediaProjection;
    private Surface inputSurface;
    private VirtualDisplay virtualDisplay;
    private MediaCodec.BufferInfo videoBufferInfo;
    private MediaCodec encoder;

    private InetAddress remoteHost;
    private int remotePort;
    private int m_nTest = 0;

    public static ScreenCastService mScreenCastService;
/*
    //单例
    private static ScreenCastService instance;
 //   private ScreenCastService (){}                //设为私有会闪退

    public static ScreenCastService getInstance() {
        if (instance == null) {
            instance = new ScreenCastService();
        }
        return instance;
    }
*/

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

/*    @Override
   public IBinder onBind(Intent intent) {
        Log.d(TAG, "onBind");

        handler = new Handler(new Handler.Callback() {
            @Override
            public boolean handleMessage(Message msg) {
                Log.i(TAG, "Handler got message. what:" + msg.what);
                switch(msg.what) {
                    case ActivityServiceMessage.CONNECTED:
                    case ActivityServiceMessage.DISCONNECTED:
                        break;
                    case ActivityServiceMessage.STOP:
                        Log.i("OnReceivePack", "Handler got message. ActivityServiceMessage.STOP");
                        stopScreenCapture();
                        closeSocket();
                        stopSelf();
                        break;
                }
                return false;
            }
        });
        crossProcessMessenger = new Messenger(handler);
        return crossProcessMessenger.getBinder();
    }*/

    private void setForeground() {
        Log.i("MyService", "setForeground: ");
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel channel = new NotificationChannel("Foreground_Service",
                    "Foreground_Service", NotificationManager.IMPORTANCE_LOW);
            NotificationManager manager =
                    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
            if (manager == null) {
                return;
            }
            manager.createNotificationChannel(channel);
            Notification notification =
                    new NotificationCompat.Builder(this, "Foreground_Service")
                            .setContentTitle("阳途屏幕监视")
                            .setContentText("正在运行中")
                            .setWhen(System.currentTimeMillis())
                            .setSmallIcon(ic_launcher)
                            .setLargeIcon(BitmapFactory.decodeResource(getResources(), ic_launcher))
                            .build();
            startForeground(101, notification);
        }  /* .setAutoCancel(true)
                .setCategory(Notification.CATEGORY_SERVICE)
                .setOngoing(true)
                .setPriority(NotificationManager.IMPORTANCE_LOW)*/
    }
    @Override
    public void onCreate() {
        super.onCreate();
        Log.d("OnReceivePack", "Screen Service--onCreate");

        mediaProjectionManager = (MediaProjectionManager) getSystemService(Context.MEDIA_PROJECTION_SERVICE);

        System.out.println("onCreate----------begin  threadid:"+android.os.Process.myTid());

    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.d("OnReceivePack", "Screen Service--onDestroy");
        stopScreenCapture();
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        if (intent == null) {
            return START_NOT_STICKY;
        }


 /*       try
        {
            Notification.Builder builder = new Notification.Builder(this.getApplicationContext()); //获取一个Notification构造器
            Intent nfIntent = new Intent(getApplication(), MainActivity.class);
            builder.setContentIntent(PendingIntent.
                    getActivity(this, 0, nfIntent, 0)) // 设置PendingIntent
                    .setLargeIcon(BitmapFactory.decodeResource(this.getResources(),
                            R.mipmap.ico3)) // 设置下拉列表中的图标(大图标)
                    .setContentTitle("下拉列表中的Title") // 设置下拉列表里的标题
                    .setSmallIcon(R.mipmap.ic_launcher) // 设置状态栏内的小图标
                    .setContentText("要显示的内容") // 设置上下文内容
                    .setWhen(System.currentTimeMillis()); // 设置该通知发生的时间
            Notification notification = builder.build(); // 获取构建好的Notification
            notification.defaults = Notification.DEFAULT_SOUND; //设置为默认的声音

            startForeground(1, notification);

            Log.w("OnReceivePack", "startForeground ------" );
        } catch (Exception e) {
            Log.e(TAG, "Failed to Start, e: " + e);
        }*/


        final String protocol = "TCP";

        final String remoteHost = AndroidParameter.serverIp;

        remotePort = 6671;

        try {
            this.remoteHost = InetAddress.getByName(remoteHost);
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return START_NOT_STICKY;
        }


        DisplayMetrics dm =new DisplayMetrics();
        WindowManager manager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
        manager.getDefaultDisplay().getRealMetrics(dm);
        int widthPixels = dm.widthPixels;//单位为像素 px
        int heightPixels = dm.heightPixels;//单位为像素 px
        float density = dm.density;
        float scaledDensity = dm.scaledDensity;
        int densityDpi = dm.densityDpi;
        Log.i("OnReceivePack",  "width,height,density,scaledDensity,densityDpi：" + widthPixels+ "," +heightPixels+ "," + density + "," + scaledDensity+ "," +densityDpi  );



        final int screenWidth = (int)(dm.widthPixels/dm.density);    //432
        final int screenHeight = (int)( dm.heightPixels/dm.density); // 872
        final  int screenDpi = dm.densityDpi;

        final String format = "video/avc";
        final int bitrate = 2048000;

        AndroidParameter.width = screenWidth ;
        AndroidParameter.hight = screenHeight ;
        AndroidParameter.density = dm.density;
        AndroidParameter.densityDpi = screenDpi ;

        Log.i("OnReceivePack", "Start casting with format:" + format + ", screen:" + screenWidth +"x"+screenHeight +" @ " + screenDpi + " bitrate:" + bitrate);

        Log.e("OnReceivePack", "connect to tcp: " + remoteHost + ":" + remotePort);
        if (!createSocket()) {
            Log.e("OnReceivePack", "Failed to connect tcp:" + remoteHost + ":" + remotePort);
            return START_NOT_STICKY;

        }
        Log.i(TAG, "TCP Socket created.");



        final int resultCode = -1;
        final Intent resultData = intent.getParcelableExtra("RESULT_DATA");

       // Intent resultDat =new Intent
        Log.i("OnReceivePack", "resultCode: " + resultCode + " resultData:" + resultData+ " resultData.ts:" +"RESULT_DATA");

        if (resultCode == 0 || resultData == null) { return  START_NOT_STICKY; }

        mScreenCastService = this;
        startScreenCapture(resultCode, resultData, format, screenWidth, screenHeight, screenDpi, bitrate);
       // startScreenCapture(format, screenWidth, screenHeight, screenDpi, bitrate);

        return START_STICKY;
        //return START_REDELIVER_INTENT;
    }

    private void startScreenCapture(int resultCode, Intent resultData, String format, int width, int height, int dpi, int bitrate) {

        NetDataHub.get().addLog("------开始屏幕监视------");

        setForeground();
        Log.i("OnReceivePack", "resultCode:"+resultCode+" resultData:"+resultData);
//        try {

            this.mediaProjection = mediaProjectionManager.getMediaProjection(resultCode, resultData);
//        }catch (Exception e){
//            Log.e( "OnReceivePack", e.toString());
//        }

        this.videoBufferInfo = new MediaCodec.BufferInfo();
        MediaFormat mediaFormat = MediaFormat.createVideoFormat(format, width, height);

        mediaFormat.setInteger(MediaFormat.KEY_BIT_RATE, bitrate);
        mediaFormat.setInteger(MediaFormat.KEY_FRAME_RATE, FPS);    //FPS = 1
        mediaFormat.setInteger(MediaFormat.KEY_CHANNEL_COUNT, 0);
        mediaFormat.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, 50);  // 配置GOP大小

        try {
            // AVC
            Log.d( "OnReceivePack", "MIMETYPE_VIDEO_AVC.....");
            mediaFormat.setInteger(MediaFormat.KEY_COLOR_FORMAT, MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);

            this.encoder = MediaCodec.createEncoderByType(format);
            this.encoder.setCallback(new MediaCodec.Callback() {
                @Override
                public void onInputBufferAvailable(MediaCodec codec, int inputBufferId) {
                }

                @Override
                public void onOutputBufferAvailable(MediaCodec codec, int outputBufferId, MediaCodec.BufferInfo info) {
                    try {


                        ByteBuffer outputBuffer = codec.getOutputBuffer(outputBufferId);

                        m_nTest++;
                        m_nTest = 0;

                        if (info.size > 0 && outputBuffer != null && m_nTest < 20) {
                            //Log.d( "OnReceivePack", "onOutputBufferAvailable.....outputBuffer");
                            int nBufSize = outputBuffer.remaining();        //返回剩余的可用长度，此长度为实际读取的数据长度，最大自然是底层数组的长度
                            outputBuffer.position(info.offset);
                            outputBuffer.limit(info.offset + info.size);
                            byte[] b = new byte[outputBuffer.remaining()];
                            outputBuffer.get(b);        //,读取缓冲区当前位置的值,然后递增，返回当前缓冲区位置上的值
                            sendData(null, b);      //080300fsy   01 发数据
                            try {
                                Thread.sleep(60);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            //---------------------
                            System.out.println("onOutputBufferAvailable----------DataSize:" + nBufSize + "  threadid:" + android.os.Process.myTid());
                        }
                        if (encoder != null && outputBufferId > 0) {
                            encoder.releaseOutputBuffer(outputBufferId, false);

                        }
                      /*
                       if(videoBufferInfo!=null)
                        {
                            if ((videoBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {
                                Log.i("OnReceivePack", "End of Stream");
                                stopScreenCapture();
                            }
                        }
                        */
                    }catch(Exception e){
                        Log.e("OnReceivePack", "error---"+e.toString());
                        if(ScreenCastService.mScreenCastService!=null) {
                            ScreenCastService.mScreenCastService.onDestroy();
                        }
                    }
                }

                @Override
                public void onError(MediaCodec codec, MediaCodec.CodecException e) {
                    e.printStackTrace();
                }

                @Override
                public void onOutputFormatChanged(MediaCodec codec, MediaFormat format) {
                    Log.i(TAG, "onOutputFormatChanged. CodecInfo:" + codec.getCodecInfo().toString() + " MediaFormat:" + format.toString());
                }
            });
            this.encoder.configure(mediaFormat
                                    , null // surface
                                    , null // crypto
                                    , MediaCodec.CONFIGURE_FLAG_ENCODE);

            this.inputSurface = this.encoder.createInputSurface();
            this.encoder.start();

        } catch (Exception e) {
            Log.e(TAG, "Failed to initial encoder, e: " + e);
            releaseEncoders();
        }

        this.virtualDisplay = this.mediaProjection.createVirtualDisplay("Recording Display", width, height, dpi, 0, this.inputSurface, null, null);
    }

    private void sendData(byte[] header, byte[] data) {     //080300 01 发送数据

        if(tcpSocketClient != null) {
            if(header != null) {
                tcpSocketClient.send(header);
            }

           // Log.d("OnReceivePacksend", "1111111111");
            tcpSocketClient.send(data); // 080300 02   直接发送data
        }
        else{
            NetDataHub.get().addLog("远程传输失败，关闭远程连接");
            Log.e("OnReceivePacksend", "关闭远程连接111");
            stopScreenCapture();
        }
    }

    private void stopScreenCapture() {
        releaseEncoders();

        if(ScreenCastService.mScreenCastService!=null)
        {
            Log.e("OnReceivePack","ScreenCastService -----!=null");
            ScreenCastService.mScreenCastService = null;
        }

        closeSocket();
        stopForeground(true);

        if (virtualDisplay == null) {
            return;
        }
        virtualDisplay.release();
        virtualDisplay = null;
    }

    private void releaseEncoders() {

        if (encoder != null) {
            encoder.stop();
            encoder.release();
            encoder = null;
        }
        if (inputSurface != null) {
            inputSurface.release();
            inputSurface = null;
        }
        if (mediaProjection != null) {
            mediaProjection.stop();
            mediaProjection = null;
        }


        videoBufferInfo = null;
    }

    private boolean createSocket() {
        tcpSocketClient = new TcpSocketClient(remoteHost, remotePort);
        tcpSocketClient.start();
        return true;
    }

    private void closeSocket() {
        if(tcpSocketClient != null) {
            Log.e("OnReceivePack", "关闭远程连接");
            try {
                tcpSocketClient.close();
            } catch(Exception ex) {
                ex.printStackTrace();
            } finally {
                tcpSocketClient = null;
            }
        }
    }

}
