package com.grampus.hualauncherkai.FloatWindow;

import android.content.Context;
import android.graphics.PixelFormat;
import android.graphics.Point;
import android.os.Build;
import android.util.Log;
import android.view.Gravity;
import android.view.WindowManager;
import android.view.WindowManager.LayoutParams;
import com.grampus.hualauncherkai.Data.NetDataHub;

public class EMMForbidWifiWindowManager {
    private static EMMForbidWifiWindow smallWindow;
    private static LayoutParams smallWindowParams;
    private static WindowManager mWindowManager;        //用于控制在屏幕上添加或移除悬浮窗。
    private final static String TAG = "EMMFloatWindowManager";
    public static void createSmallWindow(Context context) {
        try {
            WindowManager windowManager = getWindowManager(context);
            Point spt = new Point();
            windowManager.getDefaultDisplay().getSize(spt);
            int screenWidth = spt.x;
            int screenHeight = spt.y;
            if (smallWindow == null) {
                smallWindow = new EMMForbidWifiWindow(context);
               if (smallWindowParams == null) {
              //     NetDataHub.get().addLog("\n\nsmallWindowParams == null\n");//测试1
                    Log.i(TAG,"smallWindowParams == null" );
                    smallWindowParams = new LayoutParams();
                    if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {  //安卓4.4以下用这个（待测，并没有相应设备）
                        smallWindowParams.type = LayoutParams.TYPE_PHONE;
               //         NetDataHub.get().addLog("Build.VERSION.SDK_INT <= 19" );
                    } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {     //安卓8以上和8以下的Type要区分好
                //       NetDataHub.get().addLog("Build.VERSION.SDK_INT >= 26" );//TYPE_APPLICATION_OVERLAY
                       smallWindowParams.type = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY;//TYPE_SYSTEM_ERROR
                   }else {
                //       NetDataHub.get().addLog("19 < Build.VERSION.SDK_INT < 26" );
                       smallWindowParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_ERROR;//TYPE_SYSTEM_ALERT
                   }

                    smallWindowParams.format = PixelFormat.RGBA_8888;
                    smallWindowParams.flags = LayoutParams.FLAG_NOT_TOUCH_MODAL
                            | LayoutParams.FLAG_NOT_FOCUSABLE;
                    smallWindowParams.gravity = Gravity.LEFT | Gravity.TOP;
                    smallWindowParams.x = screenWidth;
                    smallWindowParams.y = (int)(screenHeight*0.8);
                    smallWindowParams.width = EMMForbidWifiWindow.viewWidth;
                    smallWindowParams.height = EMMForbidWifiWindow.viewHeight;
                    //Log.i(TAG,"smallWindowParams == null" );
                }
                /* smallWindow.setParams(smallWindowParams);*/
            //    NetDataHub.get().addLog("createSmallWindow-----addView--before" );//测试1
                windowManager.addView(smallWindow, smallWindowParams);
            //    NetDataHub.get().addLog("createSmallWindow------end" );//测试1
            }
        }catch (Exception e)
        {
            NetDataHub.get().addLog("updateViewPosition  error :"+e.toString());//测试1
            Log.e(TAG,"updateViewPosition  error :"+e.toString());
        }
    }

    public static void removeSmallWindow(Context context) {
        if (smallWindow != null) {
            WindowManager windowManager = getWindowManager(context);
            windowManager.removeView(smallWindow);
            smallWindow = null;
        }
    }

    public static boolean isWindowShowing() {
        return smallWindow!=null;
    }

    public static WindowManager getWindowManager(Context context) {
        if (mWindowManager == null) {
            mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        }
        return mWindowManager;
    }
}
