package com.grampus.hualauncherkai.service;

import android.accessibilityservice.AccessibilityService;
import android.accessibilityservice.GestureDescription;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.content.Context;
import android.content.Intent;
import android.graphics.BitmapFactory;
import android.graphics.Path;
import android.graphics.Point;
import android.os.Build;
import android.util.Log;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityNodeInfo;

import androidx.annotation.RequiresApi;
import androidx.core.app.NotificationCompat;

import static com.grampus.hualauncherkai.R.mipmap.ic_launcher;

/**
 * 这个服务属于系统级别辅助服务 需要在设置里去手动开启 和平常app里
 * 经常使用的service 是有很大不同的 非常特殊
 */
@RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)
public class MyAccessibilityService extends AccessibilityService {
    public MyAccessibilityService() {
    }

    private static MyAccessibilityService mService;

    public static synchronized MyAccessibilityService getInstance(){
        if(mService == null){
            mService = new MyAccessibilityService();

        }
        return mService;
    }

   // public static MyAccessibilityService mService = null;
    private final String TAG = "OnReceivePack";//getClass().getName();
    public boolean isAutoAgree = false;
    private void setForeground() {
        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                NotificationChannel channel = new NotificationChannel("Foreground_Service",
                        "Foreground_Service", NotificationManager.IMPORTANCE_LOW);
                NotificationManager manager = (NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
                if (manager == null) {
                    return;
                }
                manager.createNotificationChannel(channel);
                Notification notification =
                        new NotificationCompat.Builder(this, "Foreground_Service")
                                .setContentTitle("阳途安卓辅助功能")
                                .setContentText("正在运行中")
                                .setWhen(System.currentTimeMillis())
                                .setSmallIcon(ic_launcher)
                                .setLargeIcon(BitmapFactory.decodeResource(getResources(), ic_launcher))
                                .build();
                startForeground(11, notification);
            }
        }catch (Exception e) {
            Log.e(TAG, "setForeground------error:"+e.toString() );
        }
    }

    /**
     * AccessibilityService 这个服务可以关联很多属性，这些属性 一般可以通过代码在这个方法里进行设置，
     * 如果很复杂比如需要初始化广播之类的工作 都可以在这个方法里写。
     */
    @Override
    protected void onServiceConnected() {
        super.onServiceConnected();
        Log.w(TAG, "MyAccessubility---onServiceConnected---- " );
        setForeground();
        mService = this;
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.w(TAG, "MyAccessubility---onStartCommand---- " );
        //setForeground();
        //mService = this;
        return super.onStartCommand(intent, flags, startId);
    }


    public static boolean isStart() {
        return mService != null;
    }

    private Point mPoint = new Point();
    public void setPoint(int xPos,int yPos)
    {
        mPoint.set(xPos,yPos);
    }

    @Override
    public void onCreate() {
        super.onCreate();
        Log.i(TAG, "MyAccessubility---onCreate--");
    }
    @Override
    public void onInterrupt() {
        Log.i(TAG, "MyAccessubility---onInterrupt--" );
    }

    @Override
    public boolean onUnbind(Intent intent) {
        Log.i(TAG, "MyAccessibilityService--------onUnbind -- ");
        mService = null;
        try{
            stopForeground(true);
        }catch (Exception e){
            Log.i(TAG, "setForeground--error "+e.toString());
        }

        return super.onUnbind(intent);
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.i(TAG, "MyAccessibilityService------onDestroy ------ ");
        mService = null;
        try{
            stopForeground(true);
        }catch (Exception e){
            Log.i(TAG, "setForeground--error "+e.toString());
        }


    }
    int nFlag =0;
    /**
     * 当你这个服务正常开启的时候，就可以监听事件了，当然监听什么事件，监听到什么程度 都是由给这个服务的属性来决定的，
     * 监控时不需要用这个监听，我会主动发起调用
     */
    @Override
    public void onAccessibilityEvent(AccessibilityEvent event) {

        try{
            if(isAutoAgree) {
          //      AutoAgreeScreenShot();
                AccessibilityNodeInfo rowNode = getRootInActiveWindow();
                if (rowNode == null) {
                    Log.i(TAG, "noteInfo is　null");
                    return;
                } else {
                    recycle(rowNode);
                    //Log.i(TAG, "-----------");

                }
                if(nFlag++>10)
                {
                    nFlag = 0;
                    isAutoAgree = false;
                }
                Log.i(TAG, "===========================nFlag = "+nFlag);
            }
        }catch (Exception e){
            Log.i(TAG, "onAccessibilityEvent error---"+e.toString());
        }

        // 判断事件页面所在的包名，这里是自己
        //if (event.getPackageName().equals(getApplicationContext().getPackageName())) {

      /*
       switch (event.getEventType()) {
            case TYPE_TOUCH_INTERACTION_START:
            {
                Log.i(TAG, "-----TYPE_TOUCH_INTERACTION_START-----");
                AccessibilityNodeInfo rowNode = getRootInActiveWindow();
                if (rowNode == null) {
                    Log.i(TAG, "noteInfo is　null");
                    return;
                } else {
                    recycle(rowNode);
                }
                    break;
            }
        }
        */
    }


    public void recycle(AccessibilityNodeInfo info) {

        try{
            Log.i(TAG, "recycle AccessibilityNodeInfo--" );
            if (info.getChildCount() == 0) {

                String viewIdResourceName = info.getViewIdResourceName();

                Log.i(TAG, "child widget----------------------------0---" + info.getClassName()+"---"+viewIdResourceName);

                //Log.i(TAG, "showDialog:" + info.canOpenPopup());
                Log.i(TAG, "Text：" + info.getText());
                if("立即开始".equals(info.getText()))
                {
                    if (info.isClickable()) {
                        Log.i(TAG, "clickView-----------------");//类型都列出来了
                        info.performAction(AccessibilityNodeInfo.ACTION_CLICK);
                        isAutoAgree = false;

                        return; //找到之后直接Return   小概率事件撞到别的控件
                    }
                }

            } else {

                for (int i = 0; i < info.getChildCount(); i++) {
                    if(info.getChild(i)!=null){
                        recycle(info.getChild(i));
                    }
                }
            }
        }catch (Exception e){
            Log.i(TAG, "recycle error---"+e.toString());
        }
    }

    /**
     * 长按指定位置
     * 注意7.0以上的手机才有此方法，请确保运行在7.0手机上
     */
    public void dispatchGesture(int x, int y,int xPos, int yPos) {
        try {
            Path path = new Path();
            path.moveTo(x , y);
            path.lineTo(xPos, yPos);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {

                dispatchGesture(new GestureDescription.Builder().addStroke(new GestureDescription.StrokeDescription
                       (path, 0, 300)).build(), null, null);
          }
//        new AccessibilityService.GestureResultCallback(){
//            @Override
//            public void onCompleted(GestureDescription gestureDescription) {
//                super.onCompleted(gestureDescription);
//            }
//
//            @Override
//            public void onCancelled(GestureDescription gestureDescription) {
//                super.onCancelled(gestureDescription);
//            }
//        }

        }catch (Exception e) {
            Log.e(TAG, "dispatchGesture-----error:"+e.toString() );
        }
    }

    /**
     * 长按指定位置
     * 注意7.0以上的手机才有此方法，请确保运行在7.0手机上
     */
//    @RequiresApi(24)
//    @TargetApi(Build.VERSION_CODES.N)
    public void dispatchGestureLongClick(int x, int y) {
        try {

            Path path = new Path();
            path.moveTo(x - 1, y - 1);
            path.lineTo(x, y - 1);
            path.lineTo(x, y);
            path.lineTo(x - 1, y);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
                dispatchGesture(new GestureDescription.Builder().addStroke(new GestureDescription.StrokeDescription
                        (path, 0, 800)).build(), null, null);
            }
        }catch (Exception e) {
            Log.e(TAG, "dispatchGestureLongClick-------- "+e.toString() );
        }
    }

}